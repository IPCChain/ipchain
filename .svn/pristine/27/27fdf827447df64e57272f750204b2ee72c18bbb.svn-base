// Copyright (c) 2011-2016 The Bitcoin Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#ifndef BITCOIN_QT_WALLETFRAME_H
#define BITCOIN_QT_WALLETFRAME_H

#include <QFrame>
#include <QMap>

#include <QModelIndexList>

#include <QPushButton>
#include <QHBoxLayout>
#include <QVector>

class BitcoinGUI;
class ClientModel;
class PlatformStyle;
class SendCoinsRecipient;
class WalletModel;
class WalletView;

class Settingwidget;
class SendCoinsAffrimWidget;
class AddressTableModel;
class InfoWidget;
class sendhistory;
class RecvHistory;
class sendipchistory;
class recvipchistory;
class SendTokenHistory;
class RecvTokenHistory;
class SendResultWidget;

class walletpagebuttons;
class ipcSelectAddress;
QT_BEGIN_NAMESPACE
class QStackedWidget;
QT_END_NAMESPACE

/**
 * A container for embedding all wallet-related
 * controls into BitcoinGUI. The purpose of this class is to allow future
 * refinements of the wallet controls with minimal need for further
 * modifications to BitcoinGUI, thus greatly simplifying merges while
 * reducing the risk of breaking top-level stuff.
 */

class WalletFrame : public QFrame
{
    Q_OBJECT

public:

    explicit WalletFrame(const PlatformStyle *platformStyle, BitcoinGUI *_gui = 0);
    ~WalletFrame();


    enum TabTypes {
        TAB_sendipc = 1,
        TAB_recvipc = 2,
        TAB_sendtoken = 5,
        TAB_recvtoken = 6,
        TAB_send = 7,
        TAB_recv = 8
    };

    QStackedWidget* getwaletstack();
    void setClientModel(ClientModel *clientModel);

    bool addWallet(const QString& name, WalletModel *walletModel);
    bool setCurrentWallet(const QString& name);
    bool removeWallet(const QString &name);
    void removeAllWallets();
    void headshowchaininfo(int concount,int count, bool header);

Q_SIGNALS:
    /** Notify that the user has requested more information about the out-of-sync warning */
    void requestedSyncWarningInfo();
    void requestoverwidget();

private:
    QTimer *pollTimer =NULL;
    QStackedWidget *walletStack;
    QStackedWidget *walletStackBranchPage;
    QWidget * pwalletStackwidget;

    walletpagebuttons* walletpagebuttonswidget;

    Settingwidget* settingwidgetPage;

    InfoWidget* ChainInfoPage;

    SendCoinsAffrimWidget* SendCoinsAffrimPage;

    sendhistory* sendpage =NULL;

    RecvHistory* recvpage = NULL;

    sendipchistory* sendipcpage= NULL;

    recvipchistory* recvipcpage= NULL;

    SendTokenHistory*  sendtokenpage= NULL ;
    RecvTokenHistory*   recvtokenpage= NULL;

    BitcoinGUI *gui;
    ClientModel *clientModel;
    WalletModel *walletmd;
    ClientModel *clientmd;
    QModelIndex sel = QModelIndex();
    int selid;
    QMap<QString, WalletView*> mapWalletViews;

    bool bOutOfSync;

    const PlatformStyle *platformStyle;

    WalletView *currentWalletView();

public Q_SLOTS:

    void StatusInfoUpdate();
    /** Switch to overview (home) page */
    void gotoOverviewPage();
    /** Switch to receive coins page */
    void gotoReceiveCoinsPage();
    /** Switch to send coins page */
    void gotoSendCoinsPage(QString addr = "");
    /** Switch to ipc page */
    void gotoIpcPage();
    /** Switch to set page */
    void gotoSetPage();
    void gotoUnionAccountPage();
    void gotoTallyPage();
    void gotoeCoinPage();
    void showwwDetails(QModelIndex index,quint8 t);
    void GoToChainInfoPage();

    /** Encrypt the wallet */
    void encryptWallet(bool status);
    /** Backup the wallet */
    void backupWallet();

    /** Ask for passphrase to unlock wallet temporarily */
    void unlockWallet();

    /** Pass on signal over requested out-of-sync-warning information */
    void outOfSyncWarningClicked();
};

#endif // BITCOIN_QT_WALLETFRAME_H
