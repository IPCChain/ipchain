#include "ecoinsendaffrimdialog.h"
#include "forms/ui_ecoinsendaffrimdialog.h"
#include "addresstablemodel.h"
#include "optionsmodel.h"
#include "ipchainunits.h"
#include "wallet/coincontrol.h"
#include "guiutil.h"
#include <QRegExp>
#include "wallet/wallet.h"
#include <QMessageBox>
#include "log/log.h"
#include<math.h>
#include <stdlib.h>
#include <sstream>

ecoinsendaffrimdialog::ecoinsendaffrimdialog(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::ecoinsendaffrimdialog)
{
    ui->setupUi(this);
}
void ecoinsendaffrimdialog::showEvent(QShowEvent * p)
{
    ui->addEdit->setText("");
    ui->numEdit->setText("");
    ui->tiplabel->setText("");
    ui->addEdit->setFocusPolicy(Qt::StrongFocus);
    ui->addEdit->setFocus(Qt::OtherFocusReason);
    ui->numEdit->clearFocus();
}
ecoinsendaffrimdialog::~ecoinsendaffrimdialog()
{
    delete ui;
}
void ecoinsendaffrimdialog::setModel(WalletModel *_model)
{
    this->model = _model;
}
void ecoinsendaffrimdialog::setMsg(QString name,QString num)
{

    m_name = name;
    m_num = num;
    std::string strname = name.toStdString();
    int acc = model->GetAccuracyBySymbol(strname);
    QString exp("1000000000000000000|([0-9]{0,19}[\.][0-9]{0,");
    exp+=(QString::number(acc));
    exp = exp + ("})");
    QRegExp double_rx10000(exp);
    QValidator *validator = new QRegExpValidator(double_rx10000, ui->numEdit );
    ui->numEdit->setValidator( validator );
    ui->tokenlabel->setText(name);
    ui->addEdit->setText("");
    ui->numEdit->setText("");
    ui->tiplabel->setText("");
    ui->numEdit->clearFocus();

}

void ecoinsendaffrimdialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn &sendCoinsReturn, const QString &msgArg)
{
    QPalette pa;
    pa.setColor(QPalette::WindowText,Qt::black);

    LOG_WRITE(LOG_INFO,"processSendCoinsReturn","sendCoinsReturn.status",\
              QString::number(sendCoinsReturn.status).toStdString().c_str(),\
              "m_error",m_error.c_str());

    switch(sendCoinsReturn.status)
    {
    case WalletModel::PsdErr:
        ui->tiplabel->setText(tr("password error"));
        break;
    case WalletModel::NumErr:
        ui->tiplabel->setText(tr("Please enter the correct amount"));
        break;
    case WalletModel::InvalidAddress:
        ui->tiplabel->setText(tr("The recipient address is not valid. Please recheck."));
        break;
    case WalletModel::InvalidAmount:
        ui->tiplabel->setText(tr("The amount to pay must be larger than 0."));
        break;
    case WalletModel::AmountExceedsBalance:
        ui->tiplabel->setText(tr("The amount exceeds your balance."));
        break;
    case WalletModel::AmountWithFeeExceedsBalance:
        ui->tiplabel->setText(tr("The total exceeds your balance."));
        break;
    case WalletModel::DuplicateAddress:
        ui->tiplabel->setText(tr("Duplicate address found: addresses should only be used once each."));
        break;
    case WalletModel::TransactionCreationFailed:
        if(m_error == "The tokenvalue is too big,you have not enough tokencoins.")
            ui->tiplabel->setText(tr("The tokenvalue is too big,you have not enough tokencoins."));
        else if(m_error == "The Tokenvalue is too big,you have not enough Tokencoins.")
            ui->tiplabel->setText(tr("The Tokenvalue is too big,you have not enough Tokencoins."));
        else
            ui->tiplabel->setText(tr("Transaction creation failed!") + " " + m_error.c_str());
        break;
    case WalletModel::TransactionCommitFailed:
        if(m_error == "Token-reg-starttime-is-up-yet")
            ui->tiplabel->setText(tr("Token-reg-starttime-is-up-yet"));
        else
            ui->tiplabel->setText(tr("The transaction was rejected with the following reason: %1").arg(sendCoinsReturn.reasonCommitFailed));
        break;
    case WalletModel::AbsurdFee:
        ui->tiplabel->setText(tr("A fee higher"));
        break;
    case WalletModel::PaymentRequestExpired:
        ui->tiplabel->setText(tr("Payment request expired."));
        break;
    case WalletModel::OK:
    default:
        return;
    }
}


void ecoinsendaffrimdialog::on_sendecoinButton_pressed()
{
    m_error = "";
    if(!model || !model->getOptionsModel())
        return;
    if("" == ui->addEdit->text() ||
            "" == ui->numEdit->text())
    {
        ui->tiplabel->setText(tr("input info"));
        return;
    }
    QString num = ui->numEdit->text();
    QString pointword = ".";
    if(num.indexOf(pointword) == num.size()-1){
        ui->tiplabel->setText(tr("Please enter the correct amount"));
        return;
    }

    QString add = ui->addEdit->text();

    WalletModel::SendCoinsReturn sendStatus =model->prepareecoinaffrim(num,add,m_name);

    if(sendStatus.status == WalletModel::OK)
    {
        Q_EMIT gotoecoinconfrimsendaffrim(num,add);
    }
    else
    {
          m_error =  model->m_sendcoinerror;//20180201
          processSendCoinsReturn(sendStatus);
    }




}
