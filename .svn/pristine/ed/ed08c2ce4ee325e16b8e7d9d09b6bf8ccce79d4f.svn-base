#include "ecoinconfirmsendaffrimdialog.h"
#include "ui_ecoinconfirmsendaffrimdialog.h"
#include "log/log.h"
ecoinconfirmsendaffrimdialog::ecoinconfirmsendaffrimdialog(QWidget *parent) :
    QWidget(parent),walletmodel(NULL),
    ui(new Ui::ecoinconfirmsendaffrimdialog)
{
    ui->setupUi(this);
}

ecoinconfirmsendaffrimdialog::~ecoinconfirmsendaffrimdialog()
{
    delete ui;
}
void ecoinconfirmsendaffrimdialog::setModel(WalletModel *_model)
{
    walletmodel = _model;
}
void ecoinconfirmsendaffrimdialog::settrainfo(QString num,QString add)
{
    ui->tokennum->setText(num);
    ui->address->setText(add);
    ui->label_error->setText("");
    m_error = "";
}

void ecoinconfirmsendaffrimdialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn &sendCoinsReturn)
{
    QPalette pa;
    pa.setColor(QPalette::WindowText,Qt::black);

    LOG_WRITE(LOG_INFO,"processSendCoinsReturn","sendCoinsReturn.status",\
              QString::number(sendCoinsReturn.status).toStdString().c_str(),\
              "m_error:",m_error.c_str());

    switch(sendCoinsReturn.status)
    {
    case WalletModel::PsdErr:
        ui->label_error->setText(tr("password error"));
        break;
    case WalletModel::NumErr:
        ui->label_error->setText(tr("input error"));
        break;
    case WalletModel::InvalidAddress:
        ui->label_error->setText(tr("The recipient address is not valid. Please recheck."));
        break;
    case WalletModel::InvalidAmount:
        ui->label_error->setText(tr("The amount to pay must be larger than 0."));
        break;
    case WalletModel::AmountExceedsBalance:
        ui->label_error->setText(tr("The amount exceeds your balance."));
        break;
    case WalletModel::AmountWithFeeExceedsBalance:
        ui->label_error->setText(tr("The total exceeds your balance."));
        break;
    case WalletModel::DuplicateAddress:
        ui->label_error->setText(tr("Duplicate address found: addresses should only be used once each."));
        break;
    case WalletModel::TransactionCreationFailed:
        if(m_error == "The tokenvalue is too big,you have not enough tokencoins.")
            ui->label_error->setText(tr("The tokenvalue is too big,you have not enough tokencoins."));
        else if(m_error == "The Tokenvalue is too big,you have not enough Tokencoins.")
            ui->label_error->setText(tr("The Tokenvalue is too big,you have not enough Tokencoins."));
        else
            ui->label_error->setText(tr("Transaction creation failed!") + " " + m_error.c_str());
        break;
    case WalletModel::TransactionCommitFailed:
        if(m_error == "Token-reg-starttime-is-up-yet")
            ui->label_error->setText(tr("Token-reg-starttime-is-up-yet"));
        else
            ui->label_error->setText(tr("The transaction was rejected with the following reason: %1").arg(sendCoinsReturn.reasonCommitFailed));
        break;
    case WalletModel::AbsurdFee:
        ui->label_error->setText(tr("A fee higher"));
        break;
    case WalletModel::PaymentRequestExpired:
        ui->label_error->setText(tr("Payment request expired."));
        break;
    case WalletModel::OK:
    default:
        return;
    }
}

void ecoinconfirmsendaffrimdialog::on_pushButton_send_pressed()
{
    if(!walletmodel) return;

    WalletModel::SendCoinsReturn sendStatus = walletmodel->sendecoinaffrim();

    if (sendStatus.status == WalletModel::OK)
    {
        Q_EMIT SendeCoinSuccess("");
    }
    else
    {
        m_error =  walletmodel->m_sendcoinerror;
        processSendCoinsReturn(sendStatus);
    }
}

void ecoinconfirmsendaffrimdialog::on_pushButton_back_pressed()
{
    Q_EMIT backtoecoinsend();
}
