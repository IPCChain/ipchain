#include "unionaccounttransaction.h"
#include "ui_unionaccounttransaction.h"
#include "ipchainunits.h"
#include "walletmodel.h"
#include "log/log.h"
#include <QFileDialog>
#include <QTextStream>
extern bool g_bIpchainShutdown;
std::map<uint256,const CWalletTx*> vCoins;
unionaccounttransaction::unionaccounttransaction(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::unionaccounttransaction)
{
    ui->setupUi(this);

}

unionaccounttransaction::~unionaccounttransaction()
{
    killTimer(m_nTimerId);
    delete ui;
}

void unionaccounttransaction::on_sendbtn_pressed()
{
    Q_EMIT gosendPage(m_addfrom);
}
void unionaccounttransaction::setModel(WalletModel *_model)
{
    this->model = _model;
    m_nTimerId = startTimer(10000);
}
void unionaccounttransaction::setinfo(QString s1,QString s2,CAmount s3,std::string s4,
                                      QString confirmnum,QString allmnum)
{
    ui->label_txinfo->setText("");
    m_addfrom = s2;
    QString  b= BitcoinUnits::formatWithUnit2(BitcoinUnit::IPC, s3, false, BitcoinUnits::separatorNever);
    double blance = b.mid(0,b.length()-3).toDouble();
    char buf[100]={'\0'};
    sprintf(buf,"%.2lf",blance);
    std::string str(buf, sizeof(buf));
    ui->label_num->setText(QString::fromStdString(buf)+" IPC");
    ui->label_add->setText(s2);
    ui->label_name->setText(s1);
    ui->textEdit->setText(QString::fromStdString(s4));
    ui->label_confirmnum->setText(confirmnum);
    ui->label_allnum->setText(allmnum);
    timerEvent(NULL);
}
void unionaccounttransaction::on_signbtn_pressed()
{
    Q_EMIT gosignPage();
}

void unionaccounttransaction::timerEvent( QTimerEvent *event )
{
    if(!this->isVisible())return;
    if(g_bIpchainShutdown)return;
    try{
        if(this->model&&model->m_bFinishedLoading)
        {
            QString textlab = ui->label_add->text();
            if(textlab.isEmpty())return;
            std::map<std::string,CAmount> addinfo;
            CAmount num = 0; //= ui->label_num->text();
            addinfo.clear();
            addinfo.insert(make_pair(textlab.toStdString().c_str(), num));
            this->model->getAccounttrainfo(addinfo);
            std::string m_add = ui->label_add->text().toStdString().c_str();
            num = addinfo[m_add];
            QString  b= BitcoinUnits::formatWithUnit2(BitcoinUnit::IPC, num, false, BitcoinUnits::separatorNever);
            double blance = b.mid(0,b.length()-3).toDouble();
            char buf[100]={'\0'};
            sprintf(buf,"%.2lf",blance);
            std::string str(buf, sizeof(buf));
            ui->label_num->setText(QString::fromStdString(buf)+" IPC");

        }
    }
    catch(...){
        LOG_WRITE(LOG_INFO,"timerEvent Error");
    }

}

void unionaccounttransaction::on_btn_history_pressed()
{
    static bool finish_lookuphistory = true;
    if(finish_lookuphistory == false)
        return;
    else
        finish_lookuphistory = false;
    vCoins.clear();
    std::string add = ui->label_add->text().toStdString();
    CAmount num;// = addinfo[add.c_str()];
    this->model->lookuphistory(vCoins,add);
    finish_lookuphistory = true;
    if(vCoins.size() == 0)
    {
        ui->label_txinfo->setText(tr("no transaction"));
    }
    else
    {
        Q_EMIT jumptohistorypage(num,add,vCoins);
    }
}

void unionaccounttransaction::on_btn_export_pressed()
{
    QString filename = QFileDialog::getSaveFileName(this,tr("Save Text"),"",tr("Text files(*.txt)")); //选择路径
    if(filename.isEmpty())
    {
        LOG_WRITE(LOG_INFO,"file is empty");
        return;
    }
    else
    {
        if(filename.right(4)!=".txt"){
            filename=filename+".txt";
        }
        QFile file(filename);
        if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
            LOG_WRITE(LOG_INFO,"open fail");
            return;
        }
        else
        {
            QString str1, str2, qstr_similarity, sumqstr;
            for(int i = 0; i < 1; ++i)
            {
                str1 = QString::fromStdString(ui->textEdit->document()->toPlainText().toStdString());
                QLocale locale;
                QString timestr;
                if( locale.language() == QLocale::Chinese )
                {
                    sumqstr = tr("邀请码:")+"\n" + str1 + "\n" ;
                }else{
                   sumqstr = tr("script:")+"\n" + str1 + "\n" ;
                }
            }
            QTextStream in(&file);
            in << sumqstr;
            file.close();
        }
    }
}

std::string unionaccounttransaction::getAddress()
{
    return ui->label_add->text().toStdString();
}
